
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[Sauvegarde de la session précédente restaurée]

> options(error=expression(NULL))
> ## Copyright (C) 2020 Vincent Goulet
> ##
> ## Ce fichier fait partie du projet «Programmer avec R»
> ## https://gitlab.com/vigou3/programmer-avec-r
> ##
> ## Cette création est mise à disposition sous licence
> ## Attribution-Partage dans les mêmes conditions 4.0
> ## International de Creative Commons.
> ## https://creativecommons.org/licenses/by-sa/4.0/
> 
> ## Ce fichier fournit le code utile pour refaire les exemples
> ## du chapitre.
> 
> ###
> ### VÉRIFICATION DE LA SYNTAXE
> ###
> 
> ## Code de la fonction 'rgamma' avec des bogues, tel que
> ## présenté à la figure 10.1.
> ##
> ## Refaire l'indentation de la fonction avec votre éditeur
> ## pour programmeur. Cela devrait immédiatement faire
> ## ressortir qu'il manque une parenthèse dans l'appel à la
> ## fonction 'Ginv', à l'intérieur de la boucle 'while'.
> rgamma <- function(n, shape, rate = 1; scale = 1/rate)
Erreur : ';' inattendu(e) in "rgamma <- function(n, shape, rate = 1;"
> {
+     if (shape <= 0 | shape >= 1)
+         stop("valeur de shape inadmissible")
+ 
+     ratio <- function(x)
+         if (x <= 1) exp(-x) else x^(shape - 1)
+ 
+     Ginv <- function(x)
+     {
+         k <- 1 + shape * exp(-1)
+         if (x <= 1/k)
+             (k * x)^(1/shape)
+         else
+             -log(((1/shape) + exp(-1)) * (1 - x))
+     }
+ 
+     x <- numeric(n)
+     i <- 1
+     while (i < n)
+     {
+         y <- Ginv(runif(1)
+         if (runif(1) <= ratio(y))
Erreur : 'if' inattendu(e) in:
"        y <- Ginv(runif(1)
        if"
>             x[i <- i + 1] <- y
Warning message:
In x[i <- i + 1] <- y :
  le nombre d'objets à remplacer n'est pas multiple de la taille du remplacement
>     }
Erreur : '}' inattendu(e) in "    }"
>     x * scale
[1]  4  1  8 18 19  6
> }
Erreur : '}' inattendu(e) in "}"
> 
> ## La parenthèse manquante a été ajoutée dans la définition
> ## ci-dessous.
> ##
> ## Essayez de définir la fonction dans l'espace de travail.
> ## L'interpréteur R devrait attraper l'erreur de syntaxe à la
> ## toute première ligne, soit le ';' en lieu et place d'une
> ## ','.
> rgamma <- function(n, shape, rate = 1; scale = 1/rate)
Erreur : ';' inattendu(e) in "rgamma <- function(n, shape, rate = 1;"
> {
+     if (shape <= 0 | shape >= 1)
+         stop("valeur de shape inadmissible")
+ 
+     ratio <- function(x)
+         if (x <= 1) exp(-x) else x^(shape - 1)
+ 
+     Ginv <- function(x)
+     {
+         k <- 1 + shape * exp(-1)
+         if (x <= 1/k)
+             (k * x)^(1/shape)
+         else
+             -log(((1/shape) + exp(-1)) * (1 - x))
+     }
+ 
+     x <- numeric(n)
+     i <- 1
+     while (i < n)
+     {
+         y <- Ginv(runif(1))
+         if (runif(1) <= ratio(y))
+             x[i <- i + 1] <- y
+     }
+     x * scale
+ }
[1] 0.00000000 0.08564613 0.33126360 0.92473465 0.17027389
> 
> ## L'erreur de syntaxe est maintenant corrigée.
> rgamma <- function(n, shape, rate = 1, scale = 1/rate)
+ {
+     if (shape <= 0 | shape >= 1)
+         stop("valeur de shape inadmissible")
+ 
+     ratio <- function(x)
+         if (x <= 1) exp(-x) else x^(shape - 1)
+ 
+     Ginv <- function(x)
+     {
+         k <- 1 + shape * exp(-1)
+         if (x <= 1/k)
+             (k * x)^(1/shape)
+         else
+             -log(((1/shape) + exp(-1)) * (1 - x))
+     }
+ 
+     x <- numeric(n)
+     i <- 1
+     while (i < n)
+     {
+         y <- Ginv(runif(1))
+         if (runif(1) <= ratio(y))
+             x[i <- i + 1] <- y
+     }
+     x * scale
+ }
> 
> ## Nous ne sommes pas sortis du bois: l'appel de la fonction
> ## ci-dessous retourne une valeur de 0, ce qui n'est pas une
> ## valeur admissible pour une distribution gamma.
> rgamma(5, 0.5, 1)
[1] 0.00000000 2.48266519 0.89581206 0.02364389 0.00163392
> 
> ## Vérification avec d'autres valeurs des arguments. Le bogue
> ## est aisément reproductible.
> rgamma(5, 0.5, 1)
[1] 0.000000e+00 5.769752e-06 2.897934e-03 2.375461e-02 3.212129e-02
> rgamma(5, 0.8, 1)
[1] 0.00000000 0.07098932 0.13725693 0.50787046 0.86565176
> rgamma(5, 0.5, 2)
[1] 0.000000000 0.008744660 0.015392311 0.006739244 0.036770633
> rgamma(10, 0.5, 1)
 [1] 0.000000000 0.115500252 0.232353605 0.124004550 0.775793901 0.905530748
 [7] 0.008231576 0.027535719 0.002365325 0.481059474
> rgamma(1, 0.5, 1)
[1] 0
> 
> ###
> ### AFFICHAGE DE RÉSULTATS INTERMÉDIAIRES
> ###
> 
> ## Afin de découvrir le bogue de la fonction, nous ajoutons
> ## une commande 'print' à l'intérieur de la boucle 'while'.
> rgamma <- function(n, shape, rate = 1, scale = 1/rate)
+ {
+     if (shape <= 0 | shape >= 1)
+         stop("valeur de shape inadmissible")
+ 
+     ratio <- function(x)
+         if (x <= 1) exp(-x) else x^(shape - 1)
+ 
+     Ginv <- function(x)
+     {
+         k <- 1 + shape * exp(-1)
+         if (x <= 1/k)
+             (k * x)^(1/shape)
+         else
+             -log(((1/shape) + exp(-1)) * (1 - x))
+     }
+ 
+     x <- numeric(n)
+     i <- 1
+     while (i < n)
+     {
+         y <- Ginv(runif(1))
+         if (runif(1) <= ratio(y))
+         {
+             print(paste("valeur de y acceptée:", y))
+             x[i <- i + 1] <- y
+             print(c(i, x))
+         }
+     }
+     x * scale
+ }
> 
> ## L'exécution de la commande ci-dessous permet de détecter
> ## que lorsqu'une première valeur de 'y' est acceptée, elle
> ## est placée en deuxième position dans le vecteur des
> ## résultats 'x'. Ah! Ha! Le compteur 'i' est soit incrémenté
> ## trop tôt, soit initialisé une unité trop haut.
> rgamma(5, 0.5, 1)
[1] "valeur de y acceptée: 1.90483862143751"
[1] 2.000000 0.000000 1.904839 0.000000 0.000000 0.000000
[1] "valeur de y acceptée: 0.0860017045831385"
[1] 3.0000000 0.0000000 1.9048386 0.0860017 0.0000000 0.0000000
[1] "valeur de y acceptée: 0.151084644668184"
[1] 4.0000000 0.0000000 1.9048386 0.0860017 0.1510846 0.0000000
[1] "valeur de y acceptée: 0.0416302833188187"
[1] 5.00000000 0.00000000 1.90483862 0.08600170 0.15108464 0.04163028
[1] 0.00000000 1.90483862 0.08600170 0.15108464 0.04163028
> 
> ## Nous corrigeons la fonction ainsi: le compteur 'i' est
> ## initialisé à 0 plutôt qu'à 1.
> rgamma <- function(n, shape, rate = 1, scale = 1/rate)
+ {
+     if (shape <= 0 | shape >= 1)
+         stop("valeur de shape inadmissible")
+ 
+     ratio <- function(x)
+         if (x <= 1) exp(-x) else x^(shape - 1)
+ 
+     Ginv <- function(x)
+     {
+         k <- 1 + shape * exp(-1)
+         if (x <= 1/k)
+             (k * x)^(1/shape)
+         else
+             -log(((1/shape) + exp(-1)) * (1 - x))
+     }
+ 
+     x <- numeric(n)
+     i <- 0
+     while (i < n)
+     {
+         y <- Ginv(runif(1))
+         if (runif(1) <= ratio(y))
+             x[i <- i + 1] <- y
+     }
+     x * scale
+ }
> 
> ###
> ### ÉVALUATION PAS-À-PAS
> ###
> 
> ## La technique d'évaluation pas-à-pas consiste à définir tous
> ## les arguments de la fonction dans l'espace de travail, puis
> ## à exécuter le corps de la fonction ligne par ligne.
> ##
> ## Évaluons l'équivalent de l'appel 'rgamma(5, 0.5, 1)'
> ## pas-à-pas avec le bogue 'i <- 1' remis en place.
> ##
> ## Explorez les valeurs des objets 'x', 'i' et 'y' après
> ## l'évaluation de chaque expression, ci-dessous (ou, plus
> ## précisément, lorsque c'est pertinent).
> n <- 5
> shape <- 0.5
> scale <- 1
> 
> ## rgamma <- function(n, shape, rate = 1, scale = 1/rate)
> ## {
>     if (shape <= 0 | shape >= 1)
+         stop("valeur de shape inadmissible")
> 
>     ratio <- function(x)
+         if (x <= 1) exp(-x) else x^(shape - 1)
> 
>     Ginv <- function(x)
+     {
+         k <- 1 + shape * exp(-1)
+         if (x <= 1/k)
+             (k * x)^(1/shape)
+         else
+             -log(((1/shape) + exp(-1)) * (1 - x))
+     }
> 
>     x <- numeric(n)
>     i <- 1
>     ## while (i < n)
>     ## {
>         y <- Ginv(runif(1))
>         u <- runif(1)
>         if (u <= ratio(y))
+             x[i <- i + 1] <- y
>     ## }
>     x * scale
[1] 0.00000000 0.02026548 0.00000000 0.00000000 0.00000000
> ## }
> 
> ###
> ### PILE DES APPELS DE FONCTIONS
> ###
> 
> ## J'ai inséré un bogue additionnel dans la fonction interne
> ## 'Ginv' de 'rgamma', ci-dessous. Définir la fonction.
> rgamma <- function(n, shape, rate = 1, scale = 1/rate)
+ {
+     if (shape <= 0 | shape >= 1)
+         stop("valeur de shape inadmissible")
+ 
+     ratio <- function(x)
+         if (x <= 1) exp(-x) else x^(shape - 1)
+ 
+     Ginv <- function(x)
+     {
+         k <- 1 + shape * exp(-1) * variable.inconnue
+         if (x <= 1/k)
+             (k * x)^(1/shape)
+         else
+             -log(((1/shape) + exp(-1)) * (1 - x))
+     }
+ 
+     x <- numeric(n)
+     i <- 1
+     while (i < n)
+     {
+         y <- Ginv(runif(1))
+         u <- runif(1)
+         if (u <= ratio(y))
+             x[i <- i + 1] <- y
+     }
+     x * scale
+ }
> 
> ## Évaluer l'appel de fonction ci-dessous. Il y aura une
> ## erreur.
> rgamma(5, 0.5, 1)
Error in Ginv(runif(1)) : objet 'variable.inconnue' introuvable
Calls: rgamma -> Ginv
> 
> ## Afficher la pile des appels de fonctions. On voit que c'est
> ## l'appel à 'Ginv' qui pose problème.
> traceback()
2: Ginv(runif(1))
1: rgamma(5, 0.5, 1)
> 
> ###
> ### NAVIGATEUR D'ENVIRONNEMENT
> ###
> 
> ## La définition de la fonction 'rgamma' ci-dessous
> ## contient un appel à la fonction 'browser'.
> ##
> ## L'appel à la fonction qui suit provoquera l'entrée dans le
> ## navigateur d'environnement juste avant l'évaluation de
> ## l'expression 'x <- numeric(n)'.
> ##
> ## L'utilisation du navigateur demande un temps d'adaptation à
> ## cause de la forme de déphasage que l'on observe entre
> ## l'affichage de la ligne qui sera évaluée et celle qui vient
> ## d'être évaluée.
> ##
> ## L'interface de RStudio pour utiliser le navigateur est très
> ## conviviale; consultez la documentation de RStudio pour un
> ## bon tutoriel.
> ##
> ## Également, consultez la rubrique d'aide de 'browser' pour
> ## connaitre les commandes disponibles à l'invite du
> ## navigateur.
> rgamma <- function(n, shape, rate = 1, scale = 1/rate)
+ {
+     if (shape <= 0 | shape >= 1)
+         stop("valeur de shape inadmissible")
+ 
+     ratio <- function(x)
+         if (x <= 1) exp(-x) else x^(shape - 1)
+ 
+     Ginv <- function(x)
+     {
+         k <- 1 + shape * exp(-1)
+         if (x <= 1/k)
+             (k * x)^(1/shape)
+         else
+             -log(((1/shape) + exp(-1)) * (1 - x))
+     }
+     browser()
+     x <- numeric(n)
+     i <- 1
+     while (i < n)
+     {
+         y <- Ginv(runif(1))
+         if (runif(1) <= ratio(y))
+             x[i <- i + 1] <- y
+     }
+     x * scale
+ }
> rgamma(5, 0.5, 1)
Called from: rgamma(5, 0.5, 1)
Browse[1]> 
debug: x <- numeric(n)
Browse[2]> ###
Browse[2]> ### EXEMPLE ADDITIONNEL
Browse[2]> ###
Browse[2]> 
debug: i <- 1
Browse[2]> ## Variation sur le thème de la suite de Fibonacci: une
Browse[2]> ## fonction pour calculer non pas les 'n' premières valeurs
Browse[2]> ## de la suite de Fibonacci, mais uniquement la 'n'ième
Browse[2]> ## valeur.
Browse[2]> ##
Browse[2]> ## Mais il y a un mais: la fonction 'fibonaci', à l'instar de
Browse[2]> ## son nom même, est truffée d'erreurs (de syntaxe,
Browse[2]> ## d'algorithmique, de conception). À vous de trouver les
Browse[2]> ## bogues. (Afin de préserver cet exemple, copiez le code
Browse[2]> ## erroné plus bas ou dans un autre fichier avant d'y faire
Browse[2]> ## les corrections.)
Browse[2]> fibonaci <- function(nb)
+ {
+     x <- 0
+     x1 _ 0
Erreur : unexpected input in:
"    x <- 0
    x1 _"
Browse[2]>     x2 <- 1
Browse[2]>     while (n > 0))
Erreur : ')' inattendu(e) in "    while (n > 0))"
Browse[2]> x <- x1 + x2
Erreur : objet 'x1' introuvable
Browse[2]> x2 <- x1
Erreur : objet 'x1' introuvable
Browse[2]> x1 <- x
Browse[2]> n <- n - 1
Browse[2]> }
Erreur : '}' inattendu(e) in "}"
Browse[2]> fibonaci(1)                # devrait donner 0
Error in fibonaci(1) : impossible de trouver la fonction "fibonaci"
Calls: rgamma
Browse[2]> fibonaci(2)                # devrait donner 1
Error in fibonaci(2) : impossible de trouver la fonction "fibonaci"
Calls: rgamma
Browse[2]> fibonaci(5)                # devrait donner 3
Error in fibonaci(5) : impossible de trouver la fonction "fibonaci"
Calls: rgamma
Browse[2]> fibonaci(10)               # devrait donner 34
Error in fibonaci(10) : impossible de trouver la fonction "fibonaci"
Calls: rgamma
Browse[2]> fibonaci(20)               # devrait donner 4181
Error in fibonaci(20) : impossible de trouver la fonction "fibonaci"
Calls: rgamma
Browse[2]> debug: while (i < n) {
    y <- Ginv(runif(1))
    if (runif(1) <= ratio(y)) 
        x[i <- i + 1] <- y
}
Browse[2]> debug: y <- Ginv(runif(1))
Browse[2]> debug: if (runif(1) <= ratio(y)) x[i <- i + 1] <- y
Browse[2]> debug: x[i <- i + 1] <- y
Browse[2]> debug: (while) i < n
Browse[2]> debug: y <- Ginv(runif(1))
Browse[2]> debug: if (runif(1) <= ratio(y)) x[i <- i + 1] <- y
Browse[2]> debug: x[i <- i + 1] <- y
Browse[2]> debug: (while) i < n
Browse[2]> debug: y <- Ginv(runif(1))
Browse[2]> debug: if (runif(1) <= ratio(y)) x[i <- i + 1] <- y
Browse[2]> debug: (while) i < n
Browse[2]> debug: y <- Ginv(runif(1))
Browse[2]> debug: if (runif(1) <= ratio(y)) x[i <- i + 1] <- y
Browse[2]> debug: x[i <- i + 1] <- y
Browse[2]> debug: (while) i < n
Browse[2]> debug: x * scale
Browse[2]> [1] 0.00000000 0.07462948 0.21849482 0.26975319 0.00000000
> 
