source('C:/Users/Marco/Downloads/Correction_Probleme1.R', encoding = 'UTF-8')
setwd("C:/Users/Marco/Desktop/IFT-1902")
setwd("~/")
setwd("C:/Users/Marco/Desktop/IFT-1902")
setwd("C:/Users/Marco/Desktop/IFT-1902")
source('C:/Users/Marco/Desktop/IFT-1902/Atelier codéveloppement 3 semaine 11.R', encoding = 'UTF-8')
foobar(x,y,i)
setwd("C:/Users/Marco/Desktop/IFT-1902")
source('C:/Users/Marco/Desktop/IFT-1902/Atelier codéveloppement 3 semaine 11.R', encoding = 'UTF-8')
Estimated.cost(nbfactures, montants, 200)
Estimated.cost(nbfactures, montants, 150)
Estimated.cost(nbfactures, montants, 100)
mean(pmin(montants, 200))
mean(pmin(montants,c(100,150,200)))
mean(pmin(montants, 150))
sapply(c(100,150,200), mean(pmin(montants, lim)))
source('C:/Users/Marco/Desktop/IFT-1902/Atelier codéveloppement 3 semaine 11.R', encoding = 'UTF-8')
source('C:/Users/Marco/Desktop/IFT-1902/Atelier codéveloppement 3 semaine 11.R', encoding = 'UTF-8')
source('C:/Users/Marco/Desktop/IFT-1902/Atelier codéveloppement 3 semaine 11.R', encoding = 'UTF-8')
source('C:/Users/Marco/Desktop/IFT-1902/Atelier codéveloppement 3 semaine 11.R', encoding = 'UTF-8')
source('C:/Users/Marco/Desktop/IFT-1902/Atelier codéveloppement 3 semaine 11.R', encoding = 'UTF-8')
sapply(c(100,150,200), Estimated.cost, montants)
e
scan
setwd("C:/Users/Marco/Desktop/IFT-1902")
source('~/.active-rstudio-document', encoding = 'UTF-8')
## La portée (domaine où un objet existe et comporte une
## valeur) des arguments d'une fonction et de tout objet
## défini à l'intérieur de celle-ci se limite à la fonction.
##
## Ceci signifie que l'interpréteur R fait bien la distinction
## entre un objet dans l'espace de travail et un objet utilisé
## dans une fonction (fort heureusement!).
square <- function(x) x * x  # fonction de bases.R
x <- 5                       # objet dans l'espace de travail
square(10)                   # dans 'square' x vaut 10
x                            # valeur inchangée
square(x)                    # passer valeur de 'x' à 'square'
square(x = x)                # colle... signification?
ls()
environment()
environment(fun = name <- function(variables) {
})
rm(name)
ls.str()
## techniques) entraine automatiquement la création d'un
## environnement pour cette fonction:
##
## - l'environnement englobant est l'environnement actif (dans
##   lequel la fonction est créée);
## - le dictionnaire «capture» les objets de l'environnement
##   actif.
##
## Le cas le plus simple est celui des fonctions créées dans
## l'espace de travail .GlobalEnv.
f <- function(x) x + 2     # création d'une fonction
formals(f)                 # arguments formels
body(f)                    # corps de la fonction
environment(f)             # environnement de la fonction
## Lorsqu'une fonction est créée à l'intérieur d'une autre
## fonction, son environnement hérite automatiquement de
## toutes les variables définies dans la première fonction.
##
## L'exemple suivant devrait permettre de clarifier tout cela.
## La fonction 'f', qui a un argument 'x', retourne une
## fonction (anonyme) qui a un argument, 'y'.
f <- function(x)
function(y) x + y
## L'appel de la fonction 'f' donne une valeur à son argument
## 'x'. À l'intérieur de cet appel, la fonction anonyme est
## créée. La valeur de 'x' est alors «capturée» dans
## l'environnement de la fonction anonyme.
##
## En affectant le résultat (une fonction, ne l'oublions pas)
## de l'appel de 'f' à un objet, celui-ci devient une fonction
## avec un environnement qui contient la fameuse valeur de
## 'x'.
g <- f(2)
ls(envir = environment(g))
get("x", envir = environment(g))
ls.str(envir = environment(g)) # plus simple
## Par conséquent, lorsque nous appelons la fonction 'g',
## l'expression 'x + y' utilise la valeur de 'x' dans
## l'environnement de la fonction et la valeur de 'y' passée
## en argument.
g(10)
## 'new.env' pour créer un environnement vide et, par la
## suite, affecter des objets dans l'environnement avec la
## fonction 'assign'.
##
## Reprenons l'exemple ci-dessus en supposant que la valeur de
## 'x' que nous voulons placer dans l'environnement est non
## pas celle passée en argument, mais plutôt toujours 42.
## Parce que 42, on le sait, c'est la réponse à tout.
##
## Voici comment procéder.
f <- function(x)
{
fun <- function(y) x + y
environment(fun) <- new.env()
assign("x", 42, envir = environment(fun))
fun
}
g <- f(2)
ls.str(envir = environment(g))
g(10)
##   a = 1 + xy
##   b = 1 - y
##
## et f(x, y) = x a^2 + y b + a b.
##
## Nous pourrions décomposer le problème en deux fonctions:
## une première pour calculer 'x a^2 + y b + a b' pour des
## valeurs de 'x', 'y', 'a' et 'b' données, et une seconde
## pour calculer 'a = 1 + xy' et 'b = 1 - y' et les fournir à
## la première fonction.
g <- function(x, y, a, b)
x * a^2 + y * b + a * b
f <- function(x, y)
g(x, y, 1 + x * y, 1 - y)
f(2, 3)
f(2, 4)
## Cependant, la fonction 'g' ne sert pas à grand chose ici en
## dehors de 'f'. Nous pouvons donc plutôt la définir à
## l'intérieur de cette dernière.
f <- function(x, y)
{
g <- function(x, y, a, b)
x * a^2 + y * b + a * b
g(x, y, 1 + x * y, 1 - y)
}
f(2, 3)
f(2, 4)
## La portée lexicale de R nous permet de simplifier le code:
## inutile de passer les valeurs de 'x' et 'y' à la fonction
## 'g' puisque R les trouvera automatiquement dans
## l'environnement d'évaluation de 'f'.
f <- function(x, y)
{
g <- function(a, b)
x * a^2 + y * b + a * b
g(1 + x * y, 1 - y)
}
f(2, 3)
f(2, 4)
## L'évaluation paresseuse est une technique par laquelle un
## argument d'une fonction est évalué uniquement au moment où
## sa valeur est requise, et jamais avant.
##
## Il est sans doute raisonnable de supposer que l'objet
## 'does_not_exist' n'existe pas dans votre espace de travail.
## Avec l'évaluation paresseuse, nous pourrions passer cet
## objet inexistant en argument à une fonction sans que cela
## ne cause d'erreur... à condition que l'argument ne soit
## jamais utilisé dans la fonction.
f <- function(x, y)
if (x > 0) x * x else y
f(5, does_not_exist)       # argument 'y' jamais utilisé
f(0, does_not_exist)       # argument 'y' utilisé
f(0, 1/0)                  # argument 'y' utilisé
##
## Nous pouvons généraliser la fonction 'sumsq' présentée dans
## le texte du chapitre pour faire en sorte qu'elle puisse
## retirer les éventuelles données manquantes d'un vecteur en
## argument avant de faire la somme des écarts au carré.
##
## Grâce à l'évaluation paresseuse, les données manquantes
## seront également supprimées *avant* le calcul de la moyenne
## dans le cas où c'est la valeur par défaut de l'argument
## 'about' qui est utilisée.
sumsq <- function(y, about = mean(y), na.rm = FALSE)
{
if (na.rm)
y <- y[!is.na(y)]
sum((y - about)^2)
}
sumsq(c(10, 0, NA, -10), na.rm = TRUE)
rm(list=ls())
sumsq
## Liste des bibliothèques consultées par R. Votre
## bibliothèque personnelle devrait y apparaitre si vous avez
## suivi la procédure expliquée dans le chapitre.
.libPaths()
## Comme alternative à la procédure du chapitre, il est
## possible de créer le répertoire pour la bibliothèque
## personnelle, puis d'inscrire son emplacement dans le
## fichier ~/.Renviron directement depuis R.
##
## Tout d'abord, la commande 'dir.create' crée un répertoire
## dans le système de fichier. Adaptez les chemins d'accès
## selon vos besoins.
##
## Si vous êtes sous macOS, utilisez la commande suivante.
dir.create("~/Library/R/library", recursive = TRUE) # macOS
## Pour tous les autres systèmes d'exploitation, utilisez
## plutôt la commande suivante.
dir.create("~/R/library", recursive = TRUE) # autres OS
## Ensuite, la commande 'writeLines' permet d'écrire
## directement dans un fichier. Assurez-vous que le chemin
## d'accès correspond à celui utilisé ci-dessus.
##
## Si vous êtes sous macOS, utilisez la commande suivante.
writeLines('R_LIBS_USER="~/Library/R/library"',
con = "~/.Renviron")
## Pour tous les autres systèmes d'exploitation, utilisez
## plutôt la commande suivante.
writeLines('R_LIBS_USER="~/R/library"',
con = "~/.Renviron")
## La fonction 'search' retourne la liste des environnements
## dans lesquels R va chercher un objet (en particulier une
## fonction). '.GlobalEnv' est l'environnement de travail.
search()
## Liste de tous les packages installés sur votre système.
## Noter que MASS et tools en fant partie. Ce sont des
## paquetages livrés avec R, mais qui ne sont pas chargés par
## défaut.
library()
## Chargement du package MASS qui contient plusieurs
## fonctions statistiques très utiles.
library("MASS")
## Installation du paquetage actuar depuis un site miroir de
## CRAN sélectionné automatiquement.
##
## Si vous avez configuré une bibliothèque personnelle et
## qu'elle apparait dans le résultat de '.libPaths()',
## ci-dessus, le paquetage sera automatiquement installé dans
## celle-ci.
install.packages("actuar", repos = "https://cloud.r-project.org")
## Chargement du paquetage dans la session de travail. R
## recherche le paquetage dans toutes les bibliothèques de
## '.libPaths()'.
library("actuar")
setwd("C:/Users/Marco/Desktop/IFT-1902/travailLong")
source('C:/Users/Marco/Desktop/IFT-1902/travailLong/fonctions.R', encoding = 'UTF-8')
setwd("C:/Users/Marco/Desktop/IFT-1902/RefDoc")
length(which(c(-2,3>0))
)
which(c(2,3)>0)
which(c(-2,3)>0)
length(which(c(-2,3)>0))
x <- list(c(2,-3), c(2,3), c(-2,-3), c(-2,3))
sapply(x,length(which(c(-2,3)>0)))
sapply(x, sum)
sapply(x, length)
sapply(x, length(which(x>0)))
sapply(x, length(which(x>0)))
x>0
length(x>0)
length(x$1>0)
length(x[1]>0)
length(c(1,2)>0)
length(c(1,2)>0)
length(c(1,-22)>0)
length(c(-21,-22)>0)
length(which(c(-21,-22)>0))
length(which(c(-21,22)>0))
x
x[[1]]
x[[1,1]]
x[[1][1]]
x[[1]
]
x[[2]]
x[[2]]$1
x[[2]][1]
x[1]
x[2]
x[[]]
x[[]][1]
x[[1]][1]
seq_len(x)
seq_along(x)
x[[1]] >0
length(which(x[[1]]>0))
length(which(x[[2]]>0))
nb.positive <- function(x)
{
for(i in seq_along(x))
{
length(which(x[[i]] > 0))
}
}
nb.positive(x)
nb.positive <- function(x)
{
res <- numeric(length(x))
for(i in seq_along(x))
{
res[i] <- length(which(x[[i]] > 0))
}
res
}
nb.positive(x)
rm(list=ls())
